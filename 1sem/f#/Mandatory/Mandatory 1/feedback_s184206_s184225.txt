Pen & paper:
1.1 You have a good systematic approach, and your explanation is overall good,
but I am not entirely sure of your of your notation with writing types in the code,
as it is not one I have encountered before. Especially the following:

let rec collect f = function
| [] -> []
| x::xs -> 'b list @ ('a list -> 'b list) xs;;

You cannot write a type over half a function call. Maybe you are allowed to do it over
the entire call, as you do in the other code snippets, but I would advice asking Michael whether
it is an acceptable notation.

 You do mess a bit around with the arguments as well;
collect takes two arguments; f and an unnamed list (the one being matched).
You do not mention this list at all. You also cannot "call collect on f" since Collect
takes two arguments. Otherwise, your arguments are very good.

1.2 You clearly have a good understanding of what the program does and how it
evaluates. However, you are explicitly asked to use the e1 -> e2 (curly arrow) notation.
Your end result is correct, but I would advice you to look up the notation in the book
(In the end of chapter 5.1 there is an example of the notation used to evaluate fold and foldBack.
You are also very welcome to ask during the exercise sessions.)

1.3 Good. Very good that you both explain how you derive the type and check
that it fits the most general type from 1.1.

Implementation:
Please write your names and studynumbers in the fsx files also.
You should make structural tests for the declared functions belonging to
questions 1. and 2. for Task 2

2.1 Good.
2.2 Good. The two branches resulting in true could have been merged into one, by using
 (currentFlight,_)::tail -> currentFlight = flight || inRoute flight tail
2.3 Very good.
2.4 Very good.
2.5 Good

3.1 Very good. Using List.contains could probably work as well, but using List.exists is
better since that is the one presented in the course/ book.
3.2 Good.


Approved.
 - Linnea.
